// Seseragi Advanced Features - 機能デモンストレーション
show "=== Seseragi Advanced Features Showcase ==="

// =============================================================================
// 1. 構造体 + impl blocks + 演算子オーバーロード
// =============================================================================

struct Vector2D {
  x: Int,
  y: Int
}

impl Vector2D {
  fn magnitude self -> Int {
    let Vector2D {x, y} = self
    x * x + y * y
  }

  operator + self other: Vector2D -> Vector2D {
    let x = self.x + other.x
    let y = self.y + other.y
    Vector2D { x, y }
  }

  operator * self -> factor: Int -> Vector2D {
    let x = self.x * factor
    let y = self.y * factor
    Vector2D { x, y }
  }
}

// shorthand記法でベクター作成
let x = 3
let y = 4
let firstVector = Vector2D { x, y }
let secondVector = Vector2D { x: 1, y: 2 }

// spread + shorthand
let thirdVector = Vector2D { ...firstVector, y: 10 }

// メソッド + 演算子
let vectorMagnitude = firstVector magnitude()
let vectorSum = firstVector + secondVector
let scaledVector = firstVector * 2

show "=== Vector Operations ==="
show firstVector // Vector2D { x: 3, y: 4 }
show secondVector // Vector2D { x: 1, y: 2 }
show thirdVector // Vector2D { x: 3, y: 10 }
show vectorMagnitude // 25
show vectorSum // Vector2D { x: 4, y: 6 }
show scaledVector // Vector2D { x: 6, y: 8 }

// =============================================================================
// 2. タプルと分割代入
// =============================================================================

let coordinatePair = (100, 200)
let (coordX, coordY) = coordinatePair

let userInfo = ("Bob", 30, False)
let (userName, userAge, isUserActive) = userInfo

show "=== Tuple Destructuring ==="
show coordinatePair // (100, 200)
show coordX // 100
show coordY // 200
show userInfo // ("Bob", 30, False)
show userName // "Bob"
show userAge // 30
show isUserActive // False

// =============================================================================
// 3. Array 内包表記, モナド
// =============================================================================

let integerList = [x * 10 | x <- 1..=5] // == [10, 20, 30, 40, 50]
fn triple x: Int -> Int = x * 3
let multipliedList = triple <$> integerList

show "=== Array Monad Operations ==="
show integerList // [10, 20, 30, 40, 50]
show multipliedList // [30, 60, 90, 120, 150]

// =============================================================================
// 4. List 内包表記
// =============================================================================

let cubeNumbers = `[val * val * val | val <- 1..=4]
let coordinateGrid = `[(x, y) | x <- 1..=3, y <- 1..=3]

show "=== List Comprehension ==="
show cubeNumbers // `[1, 8, 27, 64]
show coordinateGrid // `[[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]]

// =============================================================================
// 5. Maybe型チェーン
// =============================================================================

fn positiveOnly input: Int -> Maybe<Int> =
  if input < 0 then Nothing else Just input

let maybePositive1 = Just 25 >>= positiveOnly
let maybePositive2 = Just -10 >>= positiveOnly

show "=== Maybe Chaining ==="
show maybePositive1 // Just 25
show maybePositive2 // Nothing

// =============================================================================
// 6. Either型エラーハンドリング
// =============================================================================

fn safeDivision divisor: Int -> numerator: Int -> Either<String, Int> =
  if divisor == 0 then Left "Division by zero" else Right (numerator / divisor)

fn validatePositive value: Int -> Either<String, Int> =
  if value <= 0 then Left "Must be positive" else Right value

// Either モナド演算子
let eitherResult1 = Right 20 >>= safeDivision 4    // Right 5
let eitherResult2 = Right 20 >>= safeDivision 0    // Left "Division by zero"
let eitherChain = Right 100 >>= safeDivision 5 >>= validatePositive  // Right 20

// Either ファンクター演算子
let eitherMapped1 = (\x -> x * 2) <$> Right 15     // Right 30
let eitherMapped2 = (\x -> x * 2) <$> Left "error" // Left "error"

show "=== Either Error Handling ==="
show eitherResult1 // Right 5
show eitherResult2 // Left "Division by zero"
show eitherChain   // Right 20
show eitherMapped1 // Right 30
show eitherMapped2 // Left "error"

// =============================================================================
// 7. パイプライン演算子と関数合成
// =============================================================================

fn addFifteen input: Int -> Int = input + 5
fn tripleValue input: Int -> Int = input * 3

let pipelineCalculation = 7 | addFifteen | tripleValue // (7 + 5) * 3 = 36

show "=== Pipeline Operators ==="
show pipelineCalculation // 36

show "=== 全機能デモ完了 ==="

