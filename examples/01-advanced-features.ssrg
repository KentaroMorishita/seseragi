// Seseragi 高度な機能のサンプル
// 実装済みの関数型プログラミング機能を使った実用的な例

show "=== Seseragi Advanced Features ==="

// =============================================================================
// カリー化と部分適用の活用
// =============================================================================

// カリー化された関数の定義
fn multiply x :Int -> y :Int -> Int = x * y
fn power base :Int -> exp :Int -> Int =
  if exp <= 0 then 1 else base * power base (exp - 1)

// 部分適用で専用関数を作成
let double = multiply 2
let triple = multiply 3
let square = power 2
let cube = power 3

show "=== Currying and Partial Application ==="
show $ double 15    // 30
show $ triple 8     // 24
show $ square 5     // 25
show $ cube 4       // 64

// =============================================================================
// 高度な再帰とアルゴリズム
// =============================================================================

// フィボナッチ数列
fn fibonacci n :Int -> Int =
  if n <= 1 then n else fibonacci (n - 1) + fibonacci (n - 2)

// 階乗
fn factorial n :Int -> Int =
  if n <= 1 then 1 else n * factorial (n - 1)

// ユークリッドの互除法
fn gcd a :Int -> b :Int -> Int =
  if b == 0 then a else gcd b (a % b)

show "=== Advanced Recursion ==="
show $ fibonacci 8   // 21
show $ factorial 5   // 120
show $ gcd 48 18     // 6

// =============================================================================
// モナド操作の実用例
// =============================================================================

// 安全な計算チェーン
fn safeDivide x :Int -> y :Int -> Maybe<Int> =
  if y == 0 then Nothing else Just (x / y)

fn safeRoot x :Int -> Maybe<Int> =
  if x < 0 then Nothing else Just x  // 簡易版

// モナドチェーンの例
let calculation1 = Just 100 >>= safeDivide 5 >>= safeDivide 2  // Just 10
let calculation2 = Just 100 >>= safeDivide 0 >>= safeDivide 2  // Nothing

show "=== Monadic Computations ==="
show calculation1
show calculation2

// =============================================================================
// 関数合成とパイプライン
// =============================================================================

// パイプライン演算子の活用
let pipeline1 = 10 | double | triple | square  // ((10 * 2) * 3)^2 = 3600
let pipeline2 = 5 | factorial | double         // 5! * 2 = 240

show "=== Function Composition ==="
show pipeline1
show pipeline2

// =============================================================================
// 高度なリスト操作
// =============================================================================

// リスト生成関数（手動構築）
let emptyList = `[]
let numberList = Cons 10 (Cons 20 (Cons 30 Empty))
let simpleList1 = 1 : 2 : 3 : 4 : 5 : `[]
let simpleList2 = `[1, 2, 3, 4, 5]
let extendedList = Cons 0 simpleList1
let comprehensionList = `[x | x <- 1..=10, x % 2 == 0]

show "=== Advanced List Operations ==="
show emptyList
show numberList
show simpleList1
show simpleList2
show extendedList
show comprehensionList

// =============================================================================
// 複雑なデータ構造の活用
// =============================================================================

// ネストしたレコードとMaybe型の組み合わせ
let complexData = {
  user: { name: "Alice", age: 30 },
  calculations: {
    result1: Just 42,
    result2: Nothing,
    result3: Just 100
  },
  metadata: {
    timestamp: "2024-01-01",
    valid: True
  }
}

show "=== Complex Data Structures ==="
show complexData

let userName = complexData.user.name
let calculation = complexData.calculations.result1

show userName
show calculation

show "=== Advanced Features Complete ==="

