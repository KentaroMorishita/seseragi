// Seseragi 動作するサンプル集
// 現在確実に動作する機能のみを使用

print "=== Working Seseragi Samples ==="

// =============================================================================
// 基本的な値と出力
// =============================================================================

print "--- Basic Values and Output ---"

let name :String = "Seseragi"
let version :Int = 1
let isReady :Bool = True

print name
print $ toString version
print $ toString isReady

// =============================================================================
// 基本的な関数
// =============================================================================

print "--- Basic Functions ---"

fn greet name :String -> String = "Hello, " + name
fn square x :Int -> Int = x * x
fn double x :Int -> Int = x * 2

print $ greet "World"
print $ toString $ square 5
print $ toString $ double 7

// =============================================================================
// カリー化された関数
// =============================================================================

print "--- Curried Functions ---"

fn add x :Int -> y :Int -> Int = x + y
fn multiply x :Int -> y :Int -> Int = x * y

print $ toString $ add 10 5
print $ toString $ multiply 6 7

// 部分適用
let add10 = add 10
let multiplyBy3 = multiply 3

print $ toString $ add10 8
print $ toString $ multiplyBy3 9

// =============================================================================
// 条件分岐
// =============================================================================

print "--- Conditionals ---"

fn max x :Int -> y :Int -> Int = if x > y then x else y
fn isEven x :Int -> Bool = if x % 2 == 0 then True else False

print $ toString $ max 15 23
print $ toString $ isEven 8
print $ toString $ isEven 7

// =============================================================================
// 文字列操作
// =============================================================================

print "--- String Operations ---"

fn fullName first :String -> last :String -> String = first + " " + last
fn makeGreeting name :String -> String = "Welcome, " + name + "!"

print $ fullName "John" "Doe"
print $ makeGreeting "Alice"

// =============================================================================
// 再帰関数
// =============================================================================

print "--- Recursive Functions ---"

fn factorial n :Int -> Int = if n <= 1 then 1 else n * factorial (n - 1)
fn power base :Int -> exp :Int -> Int = if exp == 0 then 1 else base * power base (exp - 1)

print $ toString $ factorial 5
print $ toString $ power 2 3
print $ toString $ power 3 2

// =============================================================================
// 関数型スタイルの呼び出し
// =============================================================================

print "--- Functional Style Calls ---"

// 括弧なしの呼び出し
print "Functional style works!"
putStrLn "This adds a newline"

// 変数との組み合わせ
let number :Int = 42
print $ toString number

// 複合式と関数適用演算子
print $ "Result: " + toString (add 20 22)

print "=== All samples completed successfully! ==="