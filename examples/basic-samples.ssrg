// Seseragi 基本サンプル集
// 関数型プログラミングの基本機能を紹介

// =============================================================================
// 基本的な値と型
// =============================================================================

// 基本型の変数宣言
let name :String = "Seseragi"
let version :Float = 1.0
let isReady :Bool = True
let count :Int = 42

// =============================================================================
// 標準出力（関数型スタイル）
// =============================================================================

// 基本的な出力
print "Hello, Seseragi!"
putStrLn "This is a new line"

// 変数の出力
print name
print (toString version)
print (toString count)

// 複合式の出力
print ("Version: " + toString version)
print ("Count is: " + toString count)

// =============================================================================
// 関数定義と呼び出し
// =============================================================================

// 単純な関数
fn greet name :String -> String = "Hello, " + name

// 複数パラメータの関数（カリー化）
fn add x :Int -> y :Int -> Int = x + y

// 関数の使用（関数型スタイル）
print (greet "World")
print (toString (add 10 20))

// 部分適用
let add10 = add 10
print (toString (add10 5))

// =============================================================================
// 条件分岐
// =============================================================================

fn checkNumber n :Int -> String = 
  if n > 0 then "Positive"
  else if n < 0 then "Negative" 
  else "Zero"

print (checkNumber 5)
print (checkNumber (-3))
print (checkNumber 0)

// =============================================================================
// パイプライン演算子
// =============================================================================

// パイプラインの使用例
let result1 = 10 | add 5 | toString
print result1

let result2 = "Seseragi" | greet | print

// =============================================================================
// 型定義
// =============================================================================

type Person {
  name :String
  age :Int
}

// =============================================================================
// Maybe型の使用例（将来実装予定）
// =============================================================================

// type Optional<T> = Just T | Nothing

// fn safeDivide x :Int -> y :Int -> Maybe<Int> = 
//   if y == 0 then Nothing
//   else Just (x / y)

// =============================================================================
// 高階関数の例
// =============================================================================

fn applyTwice f :(Int -> Int) -> x :Int -> Int = f (f x)

fn double x :Int -> Int = x * 2

// 使用例
let doubled = applyTwice double 5
print (toString doubled)  // 20が出力される

// =============================================================================
// リスト操作（将来実装予定）
// =============================================================================

// let numbers :List<Int> = [1, 2, 3, 4, 5]
// let doubled_numbers = map double numbers
// let sum_result = fold (+) 0 numbers

// =============================================================================
// エラーハンドリング（将来実装予定）
// =============================================================================

// type Result<T, E> = Ok T | Err E

// fn parseNumber s :String -> Result<Int, String> = 
//   if isNumeric s then Ok (toInt s)
//   else Err "Not a number"