// Type alias examples

// Simple type aliases
type UserId = Int
type UserName = String
type Age = Int

// Generic type aliases
type Result = Maybe<String>
type NumberList = List<Int>
type UserPair = (String, Int)

// Function type aliases
type Predicate = (Int -> Bool)
type Transform = (String -> String)
type Callback = (Unit -> Unit)

// Using type aliases in variable declarations
let user_id: UserId = 42
let user_name: UserName = "Alice"
let user_age: Age = 30

// Using generic type aliases
// let result: Result = Some("Success")
// let numbers: NumberList = [1, 2, 3, 4, 5]

// Using function type aliases
fn is_positive x :Int -> Bool = x > 0
fn get_name str :String -> String = str

// Comparison with union types (these should still work)
type Color = Red | Green | Blue
// type Status = Loading | Success String | Error String

// Comparison with struct types (these should still work)
type Point {
  x: Int,
  y: Int
}
type User {
  name: String,
  age: Int
}

// Using all types together
let red_color = Red
// let point = Point { x: 10, y: 20 }
// let user = User { name: user_name, age: user_age }