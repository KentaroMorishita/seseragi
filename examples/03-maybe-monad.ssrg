// Maybe型と演算子のサンプル

show "=== Maybe Type with Operators ==="

// =============================================================================
// 基本的なMaybe値
// =============================================================================

let someValue = Just 42
let nothingValue = Nothing

show someValue
show nothingValue

// =============================================================================
// ファンクター演算子 (<$>)
// =============================================================================

show "--- Functor <$> ---"

fn double x :Int -> Int = x * 2

let doubled = double <$> someValue
let doubledNothing = double <$> nothingValue

show doubled
show doubledNothing

// =============================================================================
// アプリカティブ演算子 (<*>)
// =============================================================================

show "--- Applicative <*> ---"

fn add x :Int -> y :Int -> Int = x + y

let value1 = Just 10
let value2 = Just 5

let addResult = Just add <*> value1 <*> value2
let addWithNothing = Just add <*> value1 <*> nothingValue

show addResult
show addWithNothing

// =============================================================================
// モナド演算子 (>>=)
// =============================================================================

show "--- Monad >>= ---"

fn safeDivide x :Int -> y :Int -> Maybe<Int> = if y == 0 then Nothing else Just (x / y)

let chainResult = Just 20 >>= safeDivide 2 >>= safeDivide 2
let chainError = Just 20 >>= safeDivide 0 >>= safeDivide 2

show chainResult
show chainError

show "Maybe operators sample completed!"

