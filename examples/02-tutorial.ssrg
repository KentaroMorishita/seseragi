// Seseragi 言語チュートリアル
// 基本的な言語機能を学ぶための実用的なサンプル

show "=== Seseragi Tutorial ==="

// =============================================================================
// 基本型と変数
// =============================================================================

show "--- Basic Types ---"

// 数値、文字列、真偽値
let number = 42
let message = "Hello, Seseragi!"
let flag = True

show number
show message
show flag

// =============================================================================
// 算術・比較演算
// =============================================================================

show "--- Operations ---"

let sum = 10 + 5
let product = 6 * 7
let isEqual = 5 == 5
let isGreater = 7 > 4

show sum        // 15
show product    // 42
show isEqual    // True
show isGreater  // True

// =============================================================================
// 関数定義
// =============================================================================

show "--- Functions ---"

// 基本的な関数
fn double x :Int -> Int = x * 2
fn greet name :String -> String = "Hello, " + name + "!"

// カリー化された関数
fn add x :Int -> y :Int -> Int = x + y
fn multiply x :Int -> y :Int -> Int = x * y

show $ double 21        // 42
show $ greet "World"    // "Hello, World!"
show $ add 10 15        // 25

// 部分適用
let add10 = add 10
let triple = multiply 3

show $ add10 5          // 15
show $ triple 7         // 21

// =============================================================================
// 条件分岐と再帰
// =============================================================================

show "--- Conditionals and Recursion ---"

fn abs x :Int -> Int = if x < 0 then -x else x
fn factorial n :Int -> Int =
  if n <= 1 then 1 else n * factorial (n - 1)

show $ abs (-15)        // 15
show $ factorial 5      // 120

// =============================================================================
// Maybe型 - 安全な値の処理
// =============================================================================

show "--- Maybe Type ---"

fn safeDivide x :Int -> y :Int -> Maybe<Int> =
  if y == 0 then Nothing else Just (x / y)

let result1 = safeDivide 10 2  // Just 5
let result2 = safeDivide 10 0  // Nothing

show result1
show result2

// =============================================================================
// Either型 - エラーハンドリング
// =============================================================================

show "--- Either Type ---"

fn parsePositive x :Int -> Either<String, Int> =
  if x > 0 then Right x else Left "Not positive"

let success = parsePositive 42
let error = parsePositive -5

show success
show error

// =============================================================================
// パイプライン演算子
// =============================================================================

show "--- Pipeline Operator ---"

let pipeline = 5 | double | add 3 | triple  // ((5 * 2) + 3) * 3 = 39
show pipeline

// =============================================================================
// モナド演算子
// =============================================================================

show "--- Monadic Operations ---"

// FlatMap演算子 (>>=)
let monadChain = Just 10
  >>= (\x -> safeDivide x 2)
  >>= (\x -> safeDivide x 1)  // Just 5
let monadFail = Just 10
  >>= (\x -> safeDivide x 0)
  >>= (\x -> safeDivide x 1)  // Nothing

show monadChain
show monadFail

// =============================================================================
// List型の基本操作
// =============================================================================

show "--- List Operations ---"

// リストの構築
let emptyList = `[]
let numberList = 1 : 2 : 3 : `[]
let extendedList = 0 : numberList

show emptyList      // `[]
show numberList     // `[1, 2, 3]
show extendedList   // `[0, 1, 2, 3]

// 異なる型のリスト
let maybeList = `[(Just 42), Nothing, (Just 100)]
show maybeList

// =============================================================================
// Record型
// =============================================================================

show "--- Records ---"

// 基本的なレコード
type Person = {
  name: String,
  age: Int
}

let person = { name: "Alice", age: 30 }
let point = { x: 10, y: 20 }

show person

let personName = person.name
let pointX = point.x

show personName
show pointX

// ネストしたレコード
let employee = {
  info: { name: "Bob", department: "Engineering" },
  salary: 75000
}

show employee

let employeeName = employee.info.name
show employeeName

// =============================================================================
// 構造体 (Struct)
// =============================================================================

show "--- Structs ---"

// 構造体の定義
struct Point {
  x: Int,
  y: Int
}

struct Player {
  name: String,
  age: Int
}

// 構造体のインスタンス化
let origin = Point { x: 0, y: 0 }
let playerPos = Point { x: 10, y: 5 }
let alice = Player { name: "Alice", age: 30 }

show origin
show playerPos
show alice

// 構造体フィールドアクセス
let posX = playerPos.x
let aliceName = alice.name

show posX
show aliceName

// =============================================================================
// 構造体を使った計算関数
// =============================================================================

show "--- Functions with Structs ---"

// 構造体を引数に取る関数
fn calculateDistance p :Point -> Int {
  (p.x * p.x) + (p.y * p.y)  // 距離の二乗
}

fn createPoint x :Int -> y :Int -> Point {
  Point { x: x, y: y }
}

fn describePlayer p :Player -> String =
  p.name + " is " + toString (p.age) + " years old"

// 関数の呼び出し
let distance = calculateDistance playerPos
let newPoint = createPoint 15 25
let description = describePlayer alice

show distance
show newPoint
show description

// =============================================================================
// 実用的な例：小さな計算機
// =============================================================================

show "--- Practical Example: Calculator ---"

fn calculate operation :String -> a :Int -> b :Int -> Maybe<Int> =
  operation == "add" ? Just (a + b) :
  operation == "multiply" ? Just (a * b) :
  operation == "divide" ? safeDivide a b :
  Nothing

let calc1 = calculate "add" 5 3         // Just 8
let calc2 = calculate "multiply" 4 7    // Just 28
let calc3 = calculate "divide" 15 3     // Just 5
let calc4 = calculate "divide" 10 0     // Nothing
let calc5 = calculate "unknown" 1 2     // Nothing

show calc1
show calc2
show calc3
show calc4
show calc5

show "=== Tutorial Complete! ==="

