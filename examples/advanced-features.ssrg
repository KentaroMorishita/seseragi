// Seseragi 高度な機能のサンプル
// 将来実装予定の機能を含む関数型プログラミングの応用例

print "=== Seseragi Advanced Features ==="

// =============================================================================
// 現在実装済みの高度な例
// =============================================================================

print "--- Currently Implemented Advanced Features ---"

// カリー化の活用
fn multiply x :Int -> y :Int -> Int = x * y

// 部分適用を使った専用関数
let double = multiply 2
let triple = multiply 3

print $ toString $ double 15    // 30
print $ toString $ triple 8     // 24

// 複雑な再帰関数
fn fibonacci n :Int -> Int = if n <= 1 then n else fibonacci (n - 1) + fibonacci (n - 2)
fn factorial n :Int -> Int = if n <= 1 then 1 else n * factorial (n - 1)

print "=== Fibonacci sequence ==="
print $ toString $ fibonacci 0   // 0
print $ toString $ fibonacci 1   // 1
print $ toString $ fibonacci 5   // 5
print $ toString $ fibonacci 8   // 21

print "=== Factorial examples ==="
print $ toString $ factorial 5   // 120
print $ toString $ factorial 3   // 6

// =============================================================================
// 将来実装予定の機能（サンプル）
// =============================================================================

print "--- Future Features (Commented Examples) ---"

// パターンマッチング（将来実装）
// type Color = Red | Green | Blue | RGB Int Int Int
//
// fn colorToString color :Color -> String = match color {
//   Red -> "Red"
//   Green -> "Green"
//   Blue -> "Blue"
//   RGB r g b -> "RGB(" + toString r + "," + toString g + "," + toString b + ")"
// }
//
// print (colorToString Red)
// print (colorToString (RGB 255 128 0))

// Maybe型を使った安全な操作（将来実装）
// type Maybe<T> = Just T | Nothing
//
// fn safeDivide x :Int -> y :Int -> Maybe<Int> =
//   if y == 0 then Nothing else Just (x / y)
//
// fn safeMultiply x :Maybe<Int> -> y :Int -> Maybe<Int> =
//   x >>= (fn val -> Just (val * y))
//
// let result = Just 10 >>= safeDivide 2 >>= safeMultiply 3
// print (toString result)  // Just 15

// パイプライン演算子（将来実装）
// let result = "hello"
//   | toUpperCase
//   | reverse
//   | addPrefix ">>> "
//
// print result

// リスト処理の関数型スタイル（将来実装）
// let numbers = [1, 2, 3, 4, 5]
// let doubled = map double numbers
// let evens = filter isEven numbers
// let sum = fold (+) 0 numbers
//
// パイプラインでのリスト処理
// let result = [1, 2, 3, 4, 5]
//   | map double
//   | filter (fn x -> x > 5)
//   | fold (+) 0
//
// print (toString result)

// 副作用のある関数（将来実装）
// effectful fn readFile path :String -> IO<String> =
//   -- ファイル読み込みの実装
//
// effectful fn writeFile path :String -> content :String -> IO<Unit> =
//   -- ファイル書き込みの実装
//
// 使用例
// let content = readFile "example.txt"
// writeFile "output.txt" ("Processed: " + content)

// カスタム演算子（将来実装）
// impl Int {
//   operator <+> (x, y :Int) -> Int {
//     (x + y) * 2
//   }
// }
//
// let result = 5 <+> 3  // (5 + 3) * 2 = 16
// print (toString result)

// 型クラス的な機能（将来実装）
// impl String {
//   fn length s :String -> Int = -- 実装
//   fn isEmpty s :String -> Bool = length s == 0
//
//   monoid {
//     identity ""
//     operator + (x, y :String) -> String { x + y }
//   }
// }
//
// let result = "Hello" >>> " " >>> "World"
// print result  // "Hello World"

print "=== Advanced Features Preview Complete ==="