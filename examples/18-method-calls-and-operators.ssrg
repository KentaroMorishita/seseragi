// メソッド呼び出しと演算子オーバーロードのテスト

struct Point {
  x: Int,
  y: Int
}

impl Point {
  // 演算子オーバーロード

  // 算術演算子:
  // - + (PLUS)
  // - - (MINUS)
  // - * (MULTIPLY)
  // - / (DIVIDE)
  // - % (MODULO)
  operator + self: Point -> other: Point -> Point =
    Point { x: self.x + other.x, y: self.y + other.y }
  operator - self: Point -> other: Point -> Point =
    Point { x: self.x - other.x, y: self.y - other.y }
  operator * self: Point -> scalar: Int -> Point =
    Point { x: self.x * scalar, y: self.y * scalar }
  operator / self: Point -> scalar: Int -> Point =
    Point { x: self.x / scalar, y: self.y / scalar }
  operator % self: Point -> scalar: Int -> Point =
    Point { x: self.x % scalar, y: self.y % scalar }

  // 比較演算子:
  // - == (EQUAL)
  // - != (NOT_EQUAL)
  // - < (LESS_THAN)
  // - > (GREATER_THAN)
  // - <= (LESS_EQUAL)
  // - >= (GREATER_EQUAL)
  operator == self: Point -> other: Point -> Bool =
    (self.x == other.x) && (self.y == other.y)
  operator != self: Point -> other: Point -> Bool =
    (self.x != other.x) || (self.y != other.y)
  operator < self: Point -> other: Point -> Bool =
    (self.x < other.x) || (self.x == other.x && self.y < other.y)
  operator > self: Point -> other: Point -> Bool =
    (self.x > other.x) || (self.x == other.x && self.y > other.y)
  operator <= self: Point -> other: Point -> Bool =
    (self.x < other.x) || (self.x == other.x && self.y <= other.y)
  operator >= self: Point -> other: Point -> Bool =
    (self.x > other.x) || (self.x == other.x && self.y >= other.y)

  // 論理演算子:
  // - && (AND)
  // - || (OR)
  operator && self: Point -> other: Point -> Bool =
    (self.x == other.x) && (self.y == other.y)
  operator || self: Point -> other: Point -> Bool =
    (self.x != other.x) || (self.y != other.y)
}

let p1 = Point { x: 3, y: 4 }
let p2 = Point { x: 1, y: 2 }
show p1 // Point { x: 3, y: 4 }
show p2 // Point { x: 1, y: 2 }

// 演算子オーバーロード構文

show $ p1 + p2 // Point { x: 4, y: 6 }
show $ p1 - p2 // Point { x: 2, y: 2 }
show $ p1 * 3 // Point { x: 9, y: 12 }

// 比較演算子テスト
show $ p1 == p2 // false
show $ p1 != p2 // true

// 論理演算子テスト
show $ p1 && p2 // false (自作実装)
show $ p1 || p2 // true (自作実装)

