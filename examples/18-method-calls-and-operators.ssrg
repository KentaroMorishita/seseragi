// メソッド呼び出しと演算子オーバーロードのテスト

struct Point {
  x: Int,
  y: Int
}

impl Point {
  fn add self: Point -> other: Point -> Point =
    Point { x: self.x + other.x, y: self.y + other.y }

  fn sub self: Point -> other: Point -> Point =
    Point { x: self.x - other.x, y: self.y - other.y }

  // fn scalarMultiply self: Point -> scalar: Int -> Point =
  //   Point { x: self.x * scalar, y: self.y * scalar }

  // 演算子オーバーロード
  operator + self: Point -> other: Point -> Point = self add other
  operator - self: Point -> other: Point -> Point = self sub other
  // operator * self: Point -> scalar: Int -> Point = self scalarMultiply scalar
  operator * self: Point -> scalar: Int -> Point =
    Point { x: self.x * scalar, y: self.y * scalar }
}

let p1 = Point { x: 3, y: 4 }
let p2 = Point { x: 1, y: 2 }

// メソッド呼び出し構文
let p3 = p1 add p2

// 演算子オーバーロード構文
let p4 = p1 + p2
let p5 = p1 - p2
let p6 = p1 * 3

print p1 // Point { x: 3, y: 4 }
print p2 // Point { x: 1, y: 2 }
print p3 // Point { x: 4, y: 6 }
print p4 // Point { x: 4, y: 6 }
print p5 // Point { x: 2, y: 2 }
print p6 // Point { x: 9, y: 12 }

