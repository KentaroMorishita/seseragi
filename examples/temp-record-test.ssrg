// レコード引数を取る関数のテスト

// レコード型を引数に取る関数
fn greet props: { name: String, age: Int } -> String =
  `Hello ${props.name}, age ${props.age}`

// 基本的な使用
let result1 = greet { name: "Alice", age: 30 }
show result1

// 配列内での関数呼び出し（カッコ必要性確認）
let results = [
  greet { name: "Bob", age: 25 },
  greet { name: "Carol", age: 35 }
]
show results

// UI風の関数定義
fn div props: { className: String, children: Array<String> } -> String {
  `<div class="${props.className}">${props.children}</div>`
}

fn p props: { children: String } -> String =
  `<p>${props.children}</p>`

// UI風の使用
let ui1 = div { className: "wrapper", children: ["Hello"] }
show ui1

// ネストした配列での呼び出し
let ui2 = div {
  className: "container",
  children : [
    p { children: "First paragraph" },
    p { children: "Second paragraph" }
  ]
}
show ui2

