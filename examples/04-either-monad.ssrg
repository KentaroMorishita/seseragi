// Either型と演算子のサンプル

show "=== Either Type with Operators ==="

// =============================================================================
// 基本的なEither値
// =============================================================================

let successValue = Right 42
let errorValue = Left "Something went wrong"

show successValue
show errorValue

// =============================================================================
// ファンクター演算子 (<$>)
// =============================================================================

show "--- Functor <$> ---"

fn double x :Int -> Int = x * 2

let doubled = double <$> successValue
let doubledError = double <$> errorValue

show doubled
show doubledError

// =============================================================================
// アプリカティブ演算子 (<*>)
// =============================================================================

show "--- Applicative <*> ---"

fn add x :Int -> y :Int -> Int = x + y

let num1 = Right 10
let num2 = Right 5
let error1 = Left "First error"

let addResult = Right add <*> num1 <*> num2
let addError = Right add <*> error1 <*> num2

show addResult
show addError

// =============================================================================
// モナド演算子 (>>=)
// =============================================================================

show "--- Monad >>= ---"

fn parseNumber str :String -> Either<String, Int> = if str == "42" then Right 42 else Left "Invalid number"

fn validatePositive x :Int -> Either<String, Int> = if x > 0 then Right x else Left "Must be positive"

let chainResult = parseNumber "42" >>= validatePositive
let chainError = parseNumber "0" >>= validatePositive

show chainResult
show chainError

show "Either operators sample completed!"