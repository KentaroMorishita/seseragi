// 05-signals.ssrg
// FRP: Signalの基本

print "=== FRP: Signalの基本 ==="

// =============================================================================
// 1) シグナルの作成と購読
// =============================================================================

let s: Signal<Int> = Signal(0)
let key = subscribe s (\v -> print `s=${v}`)

// 値を流す
s := 1
s := 2

// =============================================================================
// 2) ファンクター (<$>)
// =============================================================================

fn double x: Int -> Int = x * 2
let doubled: Signal<Int> = double <$> s
let key2 = subscribe doubled (\v -> print `doubled=${v}`)

// 更新を伝播させる
s := 3

// =============================================================================
// 3) アプリカティブ (<*>)
// =============================================================================

fn add x: Int -> y: Int -> Int = x + y
let sumSig: Signal<Int> = add <$> s <*> doubled
let key3 = subscribe sumSig (\v -> print `sumSig=${v}`)

s := 4

// =============================================================================
// 4) モナド (>>=) — 内部シグナルへのスイッチ
// =============================================================================

fn toInner n: Int -> Signal<Int> = Signal(n * 10)
let switched: Signal<Int> = s >>= toInner
let key4 = subscribe switched (\v -> print `switched=${v}`)

s := 5

// =============================================================================
// 5) 現在値の取得（単項 *）
// =============================================================================

let now: Int = *s
print `now=${now}`

// =============================================================================
// 6) クリーンアップ
// =============================================================================

unsubscribe key
unsubscribe key2
unsubscribe key3
unsubscribe key4
detach s

// 実行方法:
// seseragi run examples/intermediate/05-signals.ssrg
