// Seseragi 簡単なチュートリアル
// 現在実装されている機能のみを使用

print "=== Seseragi Simple Tutorial ==="

// =============================================================================
// 基本的な値と出力
// =============================================================================

print "--- Basic Values ---"

let message :String = "Hello, Seseragi!"
let age :Int = 25
let height :Float = 170.5
let isReady :Bool = True

print message
print (toString age)
print (toString height)
print (toString isReady)

// =============================================================================
// 基本的な関数
// =============================================================================

print "--- Basic Functions ---"

fn sayHello name :String -> String = "Hello, " + name
fn square x :Int -> Int = x * x
fn add x :Int -> y :Int -> Int = x + y

print (sayHello "Alice")
print (toString (square 5))
print (toString (add 10 3))

// =============================================================================
// 部分適用
// =============================================================================

print "--- Partial Application ---"

let add10 = add 10
print (toString (add10 5))
print (toString (add10 8))

let greetFormal = sayHello "Mr. Smith"
print greetFormal

// =============================================================================
// 簡単な条件分岐
// =============================================================================

print "--- Simple Conditionals ---"

fn max x :Int -> y :Int -> Int = if x > y then x else y
fn isPositive x :Int -> Bool = if x > 0 then True else False

print (toString (max 8 12))
print (toString (isPositive 5))
print (toString (isPositive (0 - 3)))

// =============================================================================
// 高階関数
// =============================================================================

print "--- Higher-Order Functions ---"

fn double x :Int -> Int = x * 2
fn applyTwice f :(Int -> Int) -> x :Int -> Int = f (f x)

print (toString (applyTwice double 3))

// =============================================================================
// 再帰関数
// =============================================================================

print "--- Recursive Functions ---"

fn factorial n :Int -> Int = if n <= 1 then 1 else n * factorial (n - 1)

print (toString (factorial 5))
print (toString (factorial 3))

print "=== Tutorial Complete! ==="