// =============================================================================
// 1. 構造体 + impl blocks + 演算子オーバーロード
// =============================================================================

struct Vector2D {
  x: Int,
  y: Int
}

impl Vector2D {
  fn magnitude self -> Int {
    let Vector2D {x, y} = self
    x * x + y * y
  }

  operator + self other: Vector2D -> Vector2D {
    let x = self.x + other.x
    let y = self.y + other.y
    Vector2D { x, y }
  }

  operator * self -> factor: Int -> Vector2D {
    let x = self.x * factor
    let y = self.y * factor
    Vector2D { x, y }
  }
}

// shorthand記法でベクター作成
let x = 3
let y = 4
let firstVector = Vector2D { x, y }
let secondVector = Vector2D { x: 1, y: 2 }

// spread + shorthand
let thirdVector = Vector2D { ...firstVector, y: 10 }

// メソッド + 演算子
let vectorMagnitude = firstVector magnitude()
let vectorSum = firstVector + secondVector
let scaledVector = firstVector * 2

show "=== Vector Operations ==="
show firstVector // Vector2D { x: 3, y: 4 }
show secondVector // Vector2D { x: 1, y: 2 }
show thirdVector // Vector2D { x: 3, y: 10 }
show vectorMagnitude // 25
show vectorSum // Vector2D { x: 4, y: 6 }
show scaledVector // Vector2D { x: 6, y: 8 }