// Seseragi Struct Examples
// 構造体（Struct）の基本的な使い方

show "=== Struct Basics ==="

// =============================================================================
// 構造体の定義
// =============================================================================

show "--- Struct Declaration ---"

// 基本的な構造体定義
struct Person {
  name: String,
  age: Int
}

struct Point {
  x: Float,
  y: Float
}

// より複雑な構造体
struct Employee {
  id: Int,
  personal: { name: String, email: String },
  department: String,
  salary: Int,
  isActive: Bool
}

// =============================================================================
// 構造体のインスタンス化
// =============================================================================

show "--- Struct Instantiation ---"

// 構造体インスタンスの作成
let alice = Person { name: "Alice", age: 30 }
let bob = Person { name: "Bob", age: 25 }

let origin = Point { x: 0.0, y: 0.0 }
let point1 = Point { x: 3.14, y: 2.71 }

show alice
show bob
show origin
show point1

// 複雑な構造体のインスタンス化
let employee1 = Employee {
  id: 1001,
  personal: { name: "Charlie", email: "charlie@example.com" },
  department: "Engineering",
  salary: 80000,
  isActive: True
}

show employee1

// =============================================================================
// フィールドアクセス
// =============================================================================

show "--- Field Access ---"

// 基本的なフィールドアクセス
let aliceName = alice.name
let aliceAge = alice.age
let pointX = point1.x
let pointY = point1.y

show aliceName
show aliceAge
show pointX
show pointY

// ネストしたフィールドアクセス
let employeeName = employee1.personal.name
let employeeEmail = employee1.personal.email
let employeeDept = employee1.department

show employeeName
show employeeEmail
show employeeDept

// =============================================================================
// 構造体を扱う関数
// =============================================================================

show "--- Functions with Structs ---"

// 構造体を引数に取る関数
fn getPersonInfo person: Person -> String =
  person.name + " is " + toString(person.age) + " years old"

fn distance p1: Point -> p2: Point -> Float {
  let dx = p2.x - p1.x
  let dy = p2.y - p1.y
  // 簡略化のため、平方根は使わず二乗和を返す
  dx * dx + dy * dy
}

let aliceInfo = getPersonInfo alice
let bobInfo = getPersonInfo bob
let dist = distance origin point1

show aliceInfo
show bobInfo
show dist

// 構造体を返す関数
fn createPerson name: String -> age: Int -> Person =
  Person { name: name, age: age }

fn midpoint p1: Point -> p2: Point -> Point = Point {
  x: (p1.x + p2.x) / 2.0,
  y: (p1.y + p2.y) / 2.0
}

let david = createPerson "David" 35
let mid = midpoint origin point1

show david
show mid

// =============================================================================
// 構造体とMaybe型
// =============================================================================

show "--- Structs with Maybe ---"

struct Contact {
  name: String,
  phone: Maybe<String>,
  email: Maybe<String>
}

let contact1 = Contact {
  name: "Eve",
  phone: Just "090-1234-5678",
  email: Just "eve@example.com"
}

let contact2 = Contact {
  name: "Frank",
  phone: Nothing,
  email: Just "frank@example.com"
}

show contact1
show contact2

// =============================================================================
// 構造体のリスト
// =============================================================================

show "--- Lists of Structs ---"

let people = Cons alice (Cons bob (Cons david Empty))
let points = Cons origin (Cons point1 (Cons mid Empty))

show people
show points

// 構造体のリストを処理する関数（簡略化）
// 注: 現在のSeseragiではパターンマッチングが限定的なため、
// 実際の処理は省略

// 簡略化のため、単純な例で示す
let person1 = Person { name: "Person1", age: 20 }
let person2 = Person { name: "Person2", age: 15 }
let person3 = Person { name: "Person3", age: 25 }
let personList = Cons person1 (Cons person2 (Cons person3 Empty))

show personList

// =============================================================================
// 構造体とレコード型の違い
// =============================================================================

show "--- Struct vs Record ---"

// レコード型（匿名）
let recordPerson = { name: "Grace", age: 28 }

// 構造体（名前付き）
let structPerson = Person { name: "Grace", age: 28 }

show recordPerson
show structPerson

// 型安全性の違い
// structPersonはPerson型として扱われる
// recordPersonは{ name: String, age: Int }型として扱われる

show "Tutorial completed!"

