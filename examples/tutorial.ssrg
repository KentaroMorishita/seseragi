// Seseragi チュートリアル
// 段階的に関数型プログラミングを学ぶためのサンプル

print "=== Seseragi Tutorial ==="

// =============================================================================
// ステップ1: 基本的な値と出力
// =============================================================================

print "--- Step 1: Basic Values and Output ---"

// 変数の宣言（let は不変変数）
let message :String = "Welcome to Seseragi!"
let age :Int = 25
let height :Float = 170.5
let isStudent :Bool = True

// 基本的な出力
print message
print $ toString age
print $ toString height
print $ toString isStudent

// =============================================================================
// ステップ2: 関数の定義と呼び出し
// =============================================================================

print "--- Step 2: Functions ---"

// 単純な関数
fn sayHello name :String -> String = "Hello, " + name

// 関数の呼び出し（関数型スタイル）
print $ sayHello "Alice"
print $ sayHello "Bob"

// 数値を扱う関数
fn square x :Int -> Int = x * x
fn cube x :Int -> Int = x * x * x

print $ toString $ square 5   // 25
print $ toString $ cube 3     // 27

// =============================================================================
// ステップ3: 複数パラメータの関数（カリー化）
// =============================================================================

print "--- Step 3: Curried Functions ---"

// 複数パラメータの関数は自動的にカリー化される
fn add x :Int -> y :Int -> Int = x + y
fn subtract x :Int -> y :Int -> Int = x - y
fn multiply x :Int -> y :Int -> Int = x * y

// 通常の使用
print $ toString $ add 10 5       // 15
print $ toString $ subtract 10 3  // 7
print $ toString $ multiply 4 6   // 24

// 部分適用の例
let add10 = add 10
print $ toString $ add10 5        // 15
print $ toString $ add10 8        // 18

let multiplyBy3 = multiply 3
print $ toString $ multiplyBy3 7  // 21

// =============================================================================
// ステップ4: 条件分岐
// =============================================================================

print "--- Step 4: Conditional Expressions ---"

fn absolute x :Int -> Int = if x < 0 then 0 - x else x
fn max x :Int -> y :Int -> Int = if x > y then x else y

print $ toString $ absolute 5     // 5
print $ toString $ max 8 12       // 12

// =============================================================================
// ステップ5: 文字列操作
// =============================================================================

print "--- Step 5: String Operations ---"

fn greetFormal title :String -> name :String -> String = "Good day, " + title + " " + name + "!"
fn fullName first :String -> last :String -> String = first + " " + last

print $ greetFormal "Mr." "Smith"
print $ fullName "John" "Doe"

// =============================================================================
// ステップ6: 再帰関数
// =============================================================================

print "--- Step 6: Recursive Functions ---"

// 階乗の計算
fn factorial n :Int -> Int = if n <= 1 then 1 else n * factorial (n - 1)

print $ toString $ factorial 5  // 120
print $ toString $ factorial 3  // 6

// フィボナッチ数列
fn fibonacci n :Int -> Int = if n <= 1 then n else fibonacci (n - 1) + fibonacci (n - 2)

print $ toString $ fibonacci 6  // 8
print $ toString $ fibonacci 7  // 13

// =============================================================================
// ステップ7: 関数型スタイルの呼び出し
// =============================================================================

print "--- Step 7: Functional Style Calls ---"

// 括弧なしの呼び出し
print "Functional style works!"
putStrLn "This adds a newline"

// 変数との組み合わせ
let number :Int = 42
print $ toString number

// 複合式と関数適用演算子
print $ "Result: " + toString (add 20 22)

print "=== Tutorial Complete! ==="