// Seseragi 言語チュートリアル

print "=== Seseragi Tutorial ==="

// =============================================================================
// 基本型と変数
// =============================================================================

print "--- Basic Types ---"

let intValue = 42
let floatValue = 3.14
let stringValue = "Hello, Seseragi!"
let boolValue = True

print intValue
print floatValue
print stringValue
print boolValue

// =============================================================================
// 関数定義
// =============================================================================

print "--- Functions ---"

// 引数なしの関数
fn getMessage -> String = "Hello from function!"
fn getNumber -> Int = 42

// 引数ありの関数
fn add x :Int -> y :Int -> Int = x + y
fn double x :Int -> Int = x * 2

let sum = add 10 5
let doubled = double 7
let message = getMessage()
let number = getNumber()

print sum
print doubled
print message
print number

// =============================================================================
// ブロック形式の関数定義
// =============================================================================

print "--- Block Functions ---"

// 複数行のブロック形式で関数を定義
fn processNumber x :Int -> Int {
  let doubled = x * 2
  let incremented = doubled + 1
  incremented
}

fn formatMessage x :Int -> String {
  "Result"
}

fn complexCalculation a :Int -> b :Int -> Int {
  let sum = a + b
  let product = a * b
  if sum > product then sum else product
}

let processed = processNumber 5
let formatted = formatMessage 42
let calculated = complexCalculation 5 6

print processed
print formatted
print calculated

// =============================================================================
// if-then-else
// =============================================================================

print "--- Conditional ---"

fn max x :Int -> y :Int -> Int = if x > y then x else y

let maximum = max 10 5
print maximum

// =============================================================================
// Maybe型の基本
// =============================================================================

print "--- Maybe Type ---"

let someValue = Just 42
let nothingValue = Nothing

print someValue
print nothingValue

fn safeDivide x :Int -> y :Int -> Maybe<Int> = if y == 0 then Nothing else Just (x / y)

let result1 = safeDivide 10 2
let result2 = safeDivide 10 0

print result1
print result2

// =============================================================================
// Either型の基本
// =============================================================================

print "--- Either Type ---"

let successValue = Right 42
let errorValue = Left "Error occurred"

print successValue
print errorValue

fn parseNumber str :String -> Either<String, Int> = if str == "42" then Right 42 else Left "Invalid number"

let parsed1 = parseNumber "42"
let parsed2 = parseNumber "invalid"

print parsed1
print parsed2

print "Tutorial completed!"