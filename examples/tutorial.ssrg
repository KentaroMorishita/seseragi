// Seseragi 言語チュートリアル - 実装済み構文のみ

print "=== Seseragi Tutorial ==="

// =============================================================================
// 基本型と変数
// =============================================================================

print "--- Basic Types ---"

// 整数
let intValue = 42
let negativeInt = -10
let zero = 0

// 文字列
let stringValue = "Hello, Seseragi!"
let emptyString = ""

// 真偽値
let trueValue = True
let falseValue = False

print intValue
print stringValue
print trueValue

// =============================================================================
// 算術演算
// =============================================================================

print "--- Arithmetic Operations ---"

let sum = 10 + 5
let difference = 20 - 8
let product = 6 * 7
let quotient = 15 / 3
let remainder = 17 % 5

print sum
print difference
print product
print quotient
print remainder

// =============================================================================
// 比較演算
// =============================================================================

print "--- Comparison Operations ---"

let isEqual = 5 == 5
let isNotEqual = 5 != 3
let isLess = 3 < 5
let isGreater = 7 > 4
let isLessOrEqual = 3 <= 3
let isGreaterOrEqual = 8 >= 8

print isEqual
print isNotEqual
print isLess
print isGreater

// =============================================================================
// 関数定義（引数なし）
// =============================================================================

print "--- Functions without Arguments ---"

fn getMessage -> String = "Hello from function!"
fn getNumber -> Int = 42

let message = getMessage()
let number = getNumber()

print message
print number

// =============================================================================
// 関数定義（引数あり）
// =============================================================================

print "--- Functions with Arguments ---"

// 単一引数の関数
fn double x :Int -> Int = x * 2
fn negate x :Int -> Int = -x
fn isPositive x :Int -> Bool = x > 0

// 複数引数の関数（カリー化）
fn add x :Int -> y :Int -> Int = x + y
fn multiply x :Int -> y :Int -> Int = x * y
fn max x :Int -> y :Int -> Int = if x > y then x else y

let doubled = double 7
let negated = negate 10
let positive = isPositive 5

print doubled
print negated
print positive

let sum2 = add 10 5
let product2 = multiply 3 4
let maximum = max 10 5

print sum2
print product2
print maximum

// =============================================================================
// ブロック形式の関数定義
// =============================================================================

print "--- Block Functions ---"

fn processNumber x :Int -> Int {
  let doubled = x * 2
  let incremented = doubled + 1
    incremented
}

fn complexCalculation a :Int -> b :Int -> Int {
  let sum = a + b
  let product = a * b
    if sum > product then sum else product
}

let processed = processNumber 5
let calculated = complexCalculation 5 6

print processed
print calculated

// =============================================================================
// if-then-else
// =============================================================================

print "--- Conditionals ---"

fn abs x :Int -> Int = if x < 0 then -x else x
fn min x :Int -> y :Int -> Int = if x < y then x else y

let absolute = abs 42
let minimum = min 10 5

print absolute
print minimum

// =============================================================================
// 再帰関数
// =============================================================================

print "--- Recursive Functions ---"

fn factorial n :Int -> Int =
  if n <= 1 then 1 else n * factorial (n - 1)

fn fibonacci n :Int -> Int =
  if n <= 1 then n
  else fibonacci (n - 1) + fibonacci (n - 2)

let fact5 = factorial 5
let fib7 = fibonacci 7

print fact5
print fib7

// =============================================================================
// Maybe型の基本
// =============================================================================

print "--- Maybe Type ---"

let someValue = Just 42
let nothingValue = Nothing

print someValue
print nothingValue

fn safeDivide x :Int -> y :Int -> Maybe<Int> =
  if y == 0 then Nothing else Just (x / y)

let divResult1 = safeDivide 10 2
let divResult2 = safeDivide 10 0

print divResult1
print divResult2

// =============================================================================
// Either型の基本
// =============================================================================

print "--- Either Type ---"

let successValue = Right 42
let errorValue = Left "Error occurred"

print successValue
print errorValue

fn parsePositive x :Int -> Either<String, Int> =
  if x > 0 then Right x else Left "Not a positive number"

let parsed1 = parsePositive 42
let parsed2 = parsePositive 5

print parsed1
print parsed2

// =============================================================================
// パターンマッチング（基本）
// =============================================================================

print "--- Pattern Matching ---"

// 整数のパターンマッチング
fn numberToString n :Int -> String = match n {
    0 -> "zero"
    1 -> "one"
    2 -> "two"
    _ -> "other"
}

let numStr1 = numberToString 1
let numStr2 = numberToString 5

print numStr1
print numStr2

// 文字列のパターンマッチング
fn greet name :String -> String = match name {
    "Alice" -> "Hello Alice!"
    "Bob" -> "Hi Bob!"
    _ -> "Hello stranger!"
}

let greeting1 = greet "Alice"
let greeting2 = greet "Charlie"

print greeting1
print greeting2

// =============================================================================
// カリー化と部分適用
// =============================================================================

print "--- Currying and Partial Application ---"

// カリー化された関数の部分適用
let add10 = add 10
let multiplyBy2 = multiply 2

let result1 = add10 5
let result2 = multiplyBy2 7

print result1
print result2

// =============================================================================
// 演算子の使用
// =============================================================================

print "--- Operators ---"

// パイプライン演算子
let pipeResult = 10 | double | add 5
print pipeResult

// FlatMap演算子（モナド操作）
let maybeResult = Just 10 >>= (\x :Int -> Just (x * 2))
print maybeResult

// =============================================================================
// ラムダ式（無名関数）
// =============================================================================

print "--- Lambda Expressions ---"

// ラムダ式の基本形
let addLambda = \x :Int -> \y :Int -> x + y
let squareLambda = \x :Int -> x * x

let lambdaResult1 = addLambda 5 3
let lambdaResult2 = squareLambda 7

print lambdaResult1
print lambdaResult2

print "Tutorial completed!"

